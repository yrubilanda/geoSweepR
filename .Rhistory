lat_col = "latitude",
lon_col = "longitude",
col_data = "offense",
filter_by = "Homicide",
n_samples = 200)
resample_heatmap <- function(data, lat_col, lon_col, n_samples = NULL, col_data = NULL, filter_by = NULL, basemap = NULL, input_crs = 4326){
# Step 1: Filters and Sampling
## Step 1.1: Optional Filters
### Step 1.1.1: Check if specified and filter according to column and value
if (!is.null(filter_by) && !is.null(col_data)) {
data <- dplyr::filter(data, .data[[col_data]] == filter_by)
#### Step 1.1.1.a: Check that there is still data after filtering. If there is no data, stop execution.
if (nrow(data) == 0){
stop("No data left after filtering. Check your col_data and filter_by values.")
}
### Step 1.1.2: Resampling filtered data
#### Step 1.1.2.a: Set default if n_samples is NULL. Default if to multiply the number of rows by 1000.
if (is.null(n_samples)){
n_samples <- 1000 * nrow(data)
}
#### Step 1.1.2.b: Resample filtered data with either a specified n_sample or default n_sample. (if specified, you might have to play around with this number)
if(n_samples > nrow(data)){
data <- dplyr::slice_sample(data, n = n_samples, replace = TRUE)
}
} else {
## Step 1.2: No Filter on Data
### Step 1.2.1: Resampling
#### Step 1.2.1.a: Set default if n_samples is NULL. Default is to multiply the total number of rows in data set by 1000.
if (is.null(n_samples)){
n_samples <- 1000 * nrow(data)
}
#### Step 1.2.1.b: Resample the entire dataset by `n_samples`.
if (n_samples > nrow(data)) {
data <- data[sample(1:nrow(data), size = n_samples, replace = TRUE), ]
}
}
# Step 2: Coordinate Reference System Argument
## Step 2.1: Make sure the coordinate reference system is used correctly. If no coordinate system is specified, the default is WGS 84.
if (is.na(sf::st_crs(input_crs))) {
stop("Invalid CRS: please provide a valid EPSG code or PROJ string.")
}
# Step 3: Convert to Spatial Object
# Use latitude and longitude columns to convert to spatial object using {sf}.
#`coords` tells the function which columns are latitude and longitude.
# `crs = input_crs` calls the coordinate reference system. If no CRS is specified, it defaults to WGS 84.
# `remove = FALSE` keeps the latitude and longitude in the table.
data_sf <- sf::st_as_sf(
data,
coords = c(lon_col, lat_col),
crs = input_crs,
remove = FALSE
)
# Step 4: Handle Basemap
## Step 4.1: Basemap Present
if (!is.null(basemap)) {
crs_target <- terra::crs(basemap)
data_proj <- sf::st_transform(data_sf, crs = crs_target)
}
## Step 4.2: No Basemap. Defaults to showing the graph on its own.
else{
data_proj <- data_sf
}
# Step 5: Extract Coordinates
data_proj <- cbind(data_proj, sf::st_coordinates(data_proj))
## Step 5.1: Rename for the plot.
names(data_proj)[names(data_proj) == "X"] <- "x"
names(data_proj)[names(data_proj) == "Y"] <- "y"
# Step 6: Create Plot
## Step 6.1: Create basic plot.
p <- ggplot2::ggplot()
## Step 6.2: Include basemap in the plot if it is provided.
if(!is.null(basemap)) {
p <- p + ggspatial::layer_spatial(basemap)
}
## Step 6.3: Include layer with the heatmap.
p <- p +
ggplot2::stat_density_2d(
data = data_proj,
ggplot2::aes(x = x, y = y, fill = after_stat(level)),
geom = "polygon",
contour = TRUE,
alpha = 0.5
) +
ggplot2::scale_fill_viridis_c(option = "cividis") +
ggplot2::labs(
title = if (!is.null(filter_by)) paste("Resampled Heatmap:", filter_by) else "Resampled Heatmap",
x = "Longitude",
y = "Latitude"
) +
ggplot2::theme_minimal()
## Step 6.4: Set coordinate reference system for basemap
if(!is.null(basemap)) {
p <- p + ggplot2::coord_sf(crs = sf::st_crs(basemap))
}
# Step 7: Generate the final plot as the output of the function.
return(p)
}
#RESAMPLE TRY
p_resample <- resample_heatmap(
data = my_data,
lat_col = "latitude",
lon_col = "longitude",
col_data = "offense",
filter_by = "Homicide",
n_samples = 200)
p_resample
rlang::last_trace()
rlang::last_trace(drop = FALSE)
devtools::load_all()
my_basemap <- get_tiles(bbox, provider = "CartoDB.Positron", crop = TRUE)
resample_heatmap <- function(data, lat_col, lon_col, n_samples = NULL, col_data = NULL, filter_by = NULL, basemap = NULL, input_crs = 4326){
# Step 1: Filters and Sampling
## Step 1.1: Optional Filters
### Step 1.1.1: Check if specified and filter according to column and value
if (!is.null(filter_by) && !is.null(col_data)) {
data <- dplyr::filter(data, .data[[col_data]] == filter_by)
#### Step 1.1.1.a: Check that there is still data after filtering. If there is no data, stop execution.
if (nrow(data) == 0){
stop("No data left after filtering. Check your col_data and filter_by values.")
}
### Step 1.1.2: Resampling filtered data
#### Step 1.1.2.a: Set default if n_samples is NULL. Default if to multiply the number of rows by 1000.
if (is.null(n_samples)){
n_samples <- 1000 * nrow(data)
}
#### Step 1.1.2.b: Resample filtered data with either a specified n_sample or default n_sample. (if specified, you might have to play around with this number)
if(n_samples > nrow(data)){
data <- dplyr::slice_sample(data, n = n_samples, replace = TRUE)
}
} else {
## Step 1.2: No Filter on Data
### Step 1.2.1: Resampling
#### Step 1.2.1.a: Set default if n_samples is NULL. Default is to multiply the total number of rows in data set by 1000.
if (is.null(n_samples)){
n_samples <- 1000 * nrow(data)
}
#### Step 1.2.1.b: Resample the entire dataset by `n_samples`.
if (n_samples > nrow(data)) {
data <- data[sample(1:nrow(data), size = n_samples, replace = TRUE), ]
}
}
# Step 2: Coordinate Reference System Argument
## Step 2.1: Make sure the coordinate reference system is used correctly. If no coordinate system is specified, the default is WGS 84.
if (is.na(sf::st_crs(input_crs))) {
stop("Invalid CRS: please provide a valid EPSG code or PROJ string.")
}
# Step 3: Convert to Spatial Object
# Use latitude and longitude columns to convert to spatial object using {sf}.
#`coords` tells the function which columns are latitude and longitude.
# `crs = input_crs` calls the coordinate reference system. If no CRS is specified, it defaults to WGS 84.
# `remove = FALSE` keeps the latitude and longitude in the table.
data_sf <- sf::st_as_sf(
data,
coords = c(lon_col, lat_col),
crs = input_crs,
remove = FALSE
)
# Step 4: Handle Basemap
## Step 4.1: Basemap Present
if (!is.null(basemap)) {
crs_target <- terra::crs(basemap)
data_proj <- sf::st_transform(data_sf, crs = crs_target)
}
## Step 4.2: No Basemap. Defaults to showing the graph on its own.
else{
data_proj <- data_sf
}
# Step 5: Extract Coordinates
data_proj <- cbind(data_proj, sf::st_coordinates(data_proj))
## Step 5.1: Rename for the plot.
names(data_proj)[names(data_proj) == "X"] <- "x"
names(data_proj)[names(data_proj) == "Y"] <- "y"
# Step 6: Create Plot
## Step 6.1: Create basic plot.
p <- ggplot2::ggplot()
## Step 6.2: Include basemap in the plot if it is provided.
if(!is.null(basemap)) {
p <- p + ggspatial::layer_spatial(basemap)
}
## Step 6.3: Include layer with the heatmap.
p <- p +
ggplot2::stat_density_2d(
data = data_proj,
ggplot2::aes(x = x, y = y, fill = after_stat(level)),
geom = "polygon",
contour = TRUE,
alpha = 0.5
) +
ggplot2::scale_fill_viridis_c(option = "cividis") +
ggplot2::labs(
title = if (!is.null(filter_by)) paste("Resampled Heatmap:", filter_by) else "Resampled Heatmap",
x = "Longitude",
y = "Latitude"
) +
ggplot2::theme_minimal()
## Step 6.4: Set coordinate reference system for basemap
if(!is.null(basemap)) {
p <- p + ggplot2::coord_sf(crs = sf::st_crs(basemap))
}
# Step 7: Generate the final plot as the output of the function.
return(p)
}
#RESAMPLE TRY
p_resample <- resample_heatmap(
data = my_data,
lat_col = "latitude",
lon_col = "longitude",
col_data = "offense",
filter_by = "Homicide",
n_samples = 200)
p_resample
# Step 7: Generate the final plot as the output of the function.
return(list(
plot = p,
resampled_data = data_proj
))
resample_heatmap <- function(data, lat_col, lon_col, n_samples = NULL, col_data = NULL, filter_by = NULL, basemap = NULL, input_crs = 4326){
# Step 1: Filters and Sampling
## Step 1.1: Optional Filters
### Step 1.1.1: Check if specified and filter according to column and value
if (!is.null(filter_by) && !is.null(col_data)) {
data <- dplyr::filter(data, .data[[col_data]] == filter_by)
#### Step 1.1.1.a: Check that there is still data after filtering. If there is no data, stop execution.
if (nrow(data) == 0){
stop("No data left after filtering. Check your col_data and filter_by values.")
}
### Step 1.1.2: Resampling filtered data
#### Step 1.1.2.a: Set default if n_samples is NULL. Default if to multiply the number of rows by 1000.
if (is.null(n_samples)){
n_samples <- 1000 * nrow(data)
}
#### Step 1.1.2.b: Resample filtered data with either a specified n_sample or default n_sample. (if specified, you might have to play around with this number)
if(n_samples > nrow(data)){
data <- dplyr::slice_sample(data, n = n_samples, replace = TRUE)
}
} else {
## Step 1.2: No Filter on Data
### Step 1.2.1: Resampling
#### Step 1.2.1.a: Set default if n_samples is NULL. Default is to multiply the total number of rows in data set by 1000.
if (is.null(n_samples)){
n_samples <- 1000 * nrow(data)
}
#### Step 1.2.1.b: Resample the entire dataset by `n_samples`.
if (n_samples > nrow(data)) {
data <- data[sample(1:nrow(data), size = n_samples, replace = TRUE), ]
}
}
# Step 2: Coordinate Reference System Argument
## Step 2.1: Make sure the coordinate reference system is used correctly. If no coordinate system is specified, the default is WGS 84.
if (is.na(sf::st_crs(input_crs))) {
stop("Invalid CRS: please provide a valid EPSG code or PROJ string.")
}
# Step 3: Convert to Spatial Object
# Use latitude and longitude columns to convert to spatial object using {sf}.
#`coords` tells the function which columns are latitude and longitude.
# `crs = input_crs` calls the coordinate reference system. If no CRS is specified, it defaults to WGS 84.
# `remove = FALSE` keeps the latitude and longitude in the table.
data_sf <- sf::st_as_sf(
data,
coords = c(lon_col, lat_col),
crs = input_crs,
remove = FALSE
)
# Step 4: Handle Basemap
## Step 4.1: Basemap Present
if (!is.null(basemap)) {
crs_target <- terra::crs(basemap)
data_proj <- sf::st_transform(data_sf, crs = crs_target)
}
## Step 4.2: No Basemap. Defaults to showing the graph on its own.
else{
data_proj <- data_sf
}
# Step 5: Extract Coordinates
data_proj <- cbind(data_proj, sf::st_coordinates(data_proj))
## Step 5.1: Rename for the plot.
names(data_proj)[names(data_proj) == "X"] <- "x"
names(data_proj)[names(data_proj) == "Y"] <- "y"
# Step 6: Create Plot
## Step 6.1: Create basic plot.
p <- ggplot2::ggplot()
## Step 6.2: Include basemap in the plot if it is provided.
if(!is.null(basemap)) {
p <- p + ggspatial::layer_spatial(basemap)
}
## Step 6.3: Include layer with the heatmap.
p <- p +
ggplot2::stat_density_2d(
data = data_proj,
ggplot2::aes(x = x, y = y, fill = after_stat(level)),
geom = "polygon",
contour = TRUE,
alpha = 0.5
) +
ggplot2::scale_fill_viridis_c(option = "cividis") +
ggplot2::labs(
title = if (!is.null(filter_by)) paste("Resampled Heatmap:", filter_by) else "Resampled Heatmap",
x = "Longitude",
y = "Latitude"
) +
ggplot2::theme_minimal()
## Step 6.4: Set coordinate reference system for basemap
if(!is.null(basemap)) {
p <- p + ggplot2::coord_sf(crs = sf::st_crs(basemap))
}
# Step 7: Generate the final plot as the output of the function.
return(list(
plot = p,
resampled_data = data_proj
))
}
#RESAMPLE TRY
p_resample <- resample_heatmap(
data = my_data,
lat_col = "latitude",
lon_col = "longitude",
col_data = "offense",
filter_by = "Homicide",
n_samples = 200)
p_resample
View(p_resample)
View(my_data)
View(p_resample$resampled_data)
#RESAMPLE TRY
p_resample <- resample_heatmap(
data = my_data,
lat_col = "latitude",
lon_col = "longitude",
col_data = "offense",
filter_by = "Homicide")
p_resample
p_resample
View(p_resample$resampled_data)
devtools::check()
devtools::check()
.Last.error
usethis::use_package("readr")
devtools::document()
devtools::check()
=======
# This is the simplest version of the function — just make a heatmap of ALL your points
make_heatmap(
data = my_data,           # your full dataset (must have lat/lon columns)
lat_col = "latitude",  # column that holds the latitude values
lon_col = "longitude", # column that holds the longitude values
col_data = NULL,       # you also can just leave this blank so just do not write in
filter_by = NULL,
basemap = NULL
)
# NOTE:
# This does NOT filter by any category — it includes every row in your dataset.
# There's also no basemap in the background — just a clean heatmap showing areas with more data points.
# This is a great starting point if you just want to see the overall spatial density of your data.
# Call the heatmap function using just your point data — no basemap but you can filter by type within your column
make_heatmap(
data = my_data,          # your dataset (must include lat/lon columns)
lat_col = "latitude", # the column in your data that has latitude values
lon_col = "longitude",# the column that has longitude values
col_data = "offense", # this is the column we're filtering on (like type or category of data)
filter_by = "Robbery" # only include rows where offense == "Robbery"
)
# Now use the heatmap function!
# This draws a density map of only "Robbery" incidents from the "offense" column,
# and overlays it on the sample basemap
make_heatmap(
data = my_data,            # your dataset with coordinates and optional filter column
lat_col = "latitude",      # name of the latitude column
lon_col = "longitude",     # name of the longitude column
col_data = "offense",      # column to filter by (can be type, category, etc.)
filter_by = "Robbery",     # specific value to filter for (e.g., "Robbery")
basemap = my_basemap       # the basemap image to use as a background (optional)
)
# Basic version of the function, running the entire code at standard levels
density_kriging(
data = my_data,            # your full dataset (must have lat/lon columns)
lon_col = "longitude", # column that holds the latitude values
lat_col = "latitude",   # column that holds the longitude values
input_crs = 4326,             #CRS for the data region - Washington DC
col_data = NULL,        #you can also leave this and the following sections blank to produce the base result
filter_by = NULL,
grid_size = 500,
variogram_model = "Sph")
# NOTE:
# This does NOT filter by any category — it uses a count derived from your entire dataset.
# This is a good way to visualize how general trends in your data can be extrapolated beyond the recorded observation.
# Adjusted code displaying how using smaller grids could affect the data
density_kriging(
data = my_data,            # your full dataset (must have lat/lon columns)
lon_col = "longitude", # column that holds the latitude values
lat_col = "latitude",   # column that holds the longitude values
input_crs = 4326,             #CRS for the data region - Washington DC
grid_size = 250)
# NOTE:
# This still does NOT filter by any category — it uses a count derived from your entire dataset but uses smaller grid sizes to get more granular with the visualization
# This can be useful for smaller datasets and for visualizing boundaries
# You can filter by specific values in particular categorical variables
density_kriging(
data = my_data,            # your full dataset (must have lat/lon columns)
lon_col = "longitude", # column that holds the latitude values
lat_col = "latitude",   # column that holds the longitude values
input_crs = 4326,             #CRS for the data region - Washington DC
col_data = "offense",
filter_by = "Robbery")
# NOTE:
# This is a good way to visualize a specific categorical value or variable
resample_heatmap(
data = my_data,
lat_col = "latitude",
lon_col = "longitude"
)
getwd()
devtools::document()
?make_heatmap
?resample_heatmap
?density_kriging
usethis::use_mit_license("Rubi Landa")
devtools::load_all()
devtools::document()
devtools::install(build_vignettes = TRUE, upgrade = "never")
devtools::install(build_vignettes = TRUE)
library(geoSweepR)
vignette("geoSweepR")
devtools::install(build_vignettes = TRUE)
vignette(package = "geoSweepR")
vignette("intro-to-geoSweepR")
devtools::clean_vignettes()
devtools::install(build_vignettes = TRUE, force = TRUE)
vignette(package = "geoSweepR")
vignette("intro-to-geoSweepR")
system.file("doc", package = "geoSweepR")
list.files(system.file("doc", package = "geoSweepR"))
devtools::clean_vignettes()
devtools::install(build_vignettes = TRUE, force = TRUE)
vignette(package = "geoSweepR")
devtools::clean_vignettes()
devtools::install(build_vignettes = TRUE, force = TRUE)
vignette(package = "geoSweepR")
rmarkdown::render("vignettes/intro-to-geoSweepR.Rmd", output_format = "html_vignette")
>>>>>>> 6120628a11ca9fe3d47417565bb5082e91cc8e2e
source("~/OneDrive/UT-Austin/Repos/geoSweepR/R/resample_heatmap.R")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
eval_viz <- FALSE  # Turn this to TRUE later when you want to knit full plots
library(geoSweepR)
resample_heatmap(
data = my_data,
lat_col = "latitude",
lon_col = "longitude"
)
devtools::load_all()
devtools::document()
pkgload::dev_help('resample_heatmap')
devtools::build_vignettes()
devtools::build_vignettes()
browseVignettes("geoSweepR")
browseVignettes("geoSweepR")
vignettes/intro-to-geoSweepR.Rmd
devtools::document()
devtools::build_vignettes()
devtools::install(build_vignettes = TRUE)
devtools::document()
devtools::build_vignettes()
install.packages("xfun")
packageVersion("xfun")
devtools::document()
devtools::build_vignettes()
browseVignettes("geoSweepR")
usethis::use_vignette("intro-to-geoSweepR")
usethis::use_vignette("Intro_geoSweepR")
usethis::use_vignette("Intro_geoSweepR"
usethis::use_vignette("Intro_geoSweepR")
usethis::use_vignette("Intro_geoSweepR")
devtools::document()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::clean_vignettes()
devtools::build_vignettes()
.Last.error
devtools::build_vignettes()
browseVignettes("geoSweepR")
browseVignettes("geoSweepR")
devtools::check()
.Last.error
install.packages(c("rmarkdown", "knitr", "devtools", "pkgbuild"))
install.packages(c("rmarkdown", "knitr", "devtools", "pkgbuild"))
pkgbuild::find_rtools()
browseVignettes("geoSweepR")
devtools::check()
unlink("vignettes/*.html", recursive = TRUE)
unlink("vignettes/*.md", recursive = TRUE)
unlink("vignettes/*.utf8.md", recursive = TRUE)
rmarkdown::render("vignettes/Intro_geoSweepR.Rmd")
remove.packages("quarto")
options(rmarkdown.v2 = TRUE)
devtools::check(build_vignettes = FALSE)
# Step 1: Build the tarball manually (skip vignettes here)
devtools::build(vignettes = FALSE)
# Step 2: Run check on the built tar.gz file (will not try to rebuild vignettes)
devtools::check_built("geoSweepR_0.1.0.tar.gz")
file.exists(".Rprofile")
getwd()
writeLines('options(rmarkdown.v2 = TRUE)', ".Rprofile")
devtools::check(build_vignettes = FALSE)
getwd()
library(devtools)
load_all()
source(".Rprofile")
install.packages("devtools")  # If you haven't already installed devtools
install.packages("remotes")
install.packages("devtools")
